{"version":3,"sources":["images/ProfilePicture.jpeg","components/SocialIcon.js","components/Socials.js","components/JobData.js","components/Portfolio.js","serviceWorker.js","index.js"],"names":["module","exports","SocialIcon","name","link","Icon","Icons","IconButton","href","title","Socials","socials","map","social","key","techsUsed","job","jobData","jobDataKeys","Object","keys","useStyles","makeStyles","theme","techChip","margin","spacing","jobChip","color","backgroundColor","JobTitle","classes","jobKey","Chip","label","className","height","width","length","gap","position","distribution","direction","tech","dragConstraints","left","right","top","bottom","drag","whileHover","scale","background","dragTransition","bounceStiffness","bounceDamping","size","clickable","Portfolio","Fragment","Grid","container","alignItems","justify","item","radius","dragPropagation","dragElastic","image","ProfilePicture","JobData","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qcAAAA,EAAOC,QAAU,IAA0B,6C,oKCc5BC,EAXI,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KACpBC,EAAOC,EAAMH,GACnB,OACE,oCACE,kBAACI,EAAA,EAAD,CAAYC,KAAMJ,EAAMK,MAAON,GAC7B,kBAACE,EAAD,S,QCKOK,EAVC,WACd,OACE,oCACGC,EAAQC,KAAI,SAACC,GAAD,OACX,kBAAC,EAAD,CAAYV,KAAMU,EAAOV,KAAMC,KAAMS,EAAOT,KAAMU,IAAKD,EAAOV,Y,wCCF9DY,EAA0BC,EAA1BD,UAAcE,E,YAAYD,E,eAC5BE,EAAcC,OAAOC,KAAKH,GAE1BI,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,SAAU,CACRC,OAAQF,EAAMG,QAAQ,KAExBC,QAAS,CACPC,MAAO,QACPC,gBAAiB,UACjBJ,OAAQF,EAAMG,QAAQ,SA8CXI,EA3CE,WACf,IAAMC,EAAUV,IAEhB,OACE,oCACGH,EAAYN,KAAI,SAACoB,GAAD,OACf,kBAACC,EAAA,EAAD,CACEnB,IAAKkB,EACLE,MAAK,UAAKF,EAAL,aAAgBhB,EAAIgB,IACzBG,UAAWJ,EAAQJ,aAGvB,kBAAC,QAAD,CACES,OAAQ,GACRC,MAAO,GAAKtB,EAAUuB,OACtBC,IAAK,GACLC,SAAU,WACVC,aAAa,SACbC,UAAW,cACV3B,EAAUH,KAAI,SAAC+B,GAAD,OACb,kBAAC,QAAD,CACEP,OAAQ,GACRQ,gBAAiB,CAAEC,KAAM,EAAGC,MAAO,EAAGC,IAAK,EAAGC,OAAQ,GACtDC,MAAM,EACNZ,MAAOM,EAAKL,OAAS,EAAI,GAAK,GAAKK,EAAKL,OACxCY,WAAY,CAAEC,MAAO,KACrBC,WAAY,KACZC,eAAgB,CAAEC,gBAAiB,IAAKC,cAAe,IACvDzC,IAAK6B,GACL,kBAACV,EAAA,EAAD,CACEuB,KAAK,QACL1C,IAAK6B,EACLT,MAAOS,EACPc,WAAS,EACTtB,UAAWJ,EAAQP,kB,iBClBlBkC,MA5Bf,WACE,OACE,kBAAC,IAAMC,SAAP,KACE,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACnB,UAAU,SAASoB,WAAW,SAASC,QAAQ,UAC7D,kBAACH,EAAA,EAAD,CAAMI,MAAI,GACR,kBAAC,QAAD,CACER,KAAM,IACNS,OAAQ,IACRzB,SAAU,WACVS,MAAM,EACNiB,iBAAiB,EACjBtB,gBAAiB,CAAEG,IAAK,EAAGC,OAAQ,EAAGH,MAAO,IAAKC,MAAO,KACzDqB,YAAa,GACbd,eAAgB,CAAEC,gBAAiB,IAAKC,cAAe,IACvDH,WAAY,KACZgB,MAAOC,OAEX,kBAACT,EAAA,EAAD,CAAMI,MAAI,GACR,kBAACM,EAAD,OAEF,kBAACV,EAAA,EAAD,CAAMI,MAAI,GACR,kBAAC,EAAD,UCfUO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAeC,SAASC,eAAe,SD6HjD,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a546484e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ProfilePicture.d487911e.jpeg\";","import React from 'react';\nimport * as Icons from '@material-ui/icons';\nimport IconButton from '@material-ui/core/IconButton';\nconst SocialIcon = ({ name, link }) => {\n  const Icon = Icons[name];\n  return (\n    <>\n      <IconButton href={link} title={name}>\n        <Icon />\n      </IconButton>\n    </>\n  );\n};\n\nexport default SocialIcon;\n","import React from 'react';\nimport SocialIcon from './SocialIcon';\nimport socials from '../constants/socials.json';\nconst Socials = () => {\n  return (\n    <>\n      {socials.map((social) => (\n        <SocialIcon name={social.name} link={social.link} key={social.name} />\n      ))}\n    </>\n  );\n};\n\nexport default Socials;\n","import React from 'react';\nimport Chip from '@material-ui/core/Chip';\nimport job from '../constants/job.json';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Frame, Stack } from 'framer';\nconst { techsUsed, ...jobData } = job;\nconst jobDataKeys = Object.keys(jobData);\n\nconst useStyles = makeStyles((theme) => ({\n  techChip: {\n    margin: theme.spacing(0.5),\n  },\n  jobChip: {\n    color: 'white',\n    backgroundColor: '#bdbdbd',\n    margin: theme.spacing(0.5),\n  },\n}));\nconst JobTitle = () => {\n  const classes = useStyles();\n\n  return (\n    <>\n      {jobDataKeys.map((jobKey) => (\n        <Chip\n          key={jobKey}\n          label={`${jobKey}: ${job[jobKey]}`}\n          className={classes.jobChip}\n        />\n      ))}\n      <Stack\n        height={40}\n        width={60 * techsUsed.length}\n        gap={20}\n        position={'relative'}\n        distribution='center'\n        direction={'horizontal'}>\n        {techsUsed.map((tech) => (\n          <Frame\n            height={35}\n            dragConstraints={{ left: 0, right: 0, top: 0, bottom: 0 }}\n            drag={true}\n            width={tech.length < 5 ? 35 : 45 + tech.length}\n            whileHover={{ scale: 0.95 }}\n            background={null}\n            dragTransition={{ bounceStiffness: 300, bounceDamping: 10 }}\n            key={tech}>\n            <Chip\n              size='small'\n              key={tech}\n              label={tech}\n              clickable\n              className={classes.techChip}\n            />\n          </Frame>\n        ))}\n      </Stack>\n    </>\n  );\n};\n\nexport default JobTitle;\n","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Socials from './Socials';\nimport JobData from './JobData';\nimport ProfilePicture from '../images/ProfilePicture.jpeg';\nimport { Frame } from 'framer';\nfunction Portfolio() {\n  return (\n    <React.Fragment>\n      <Grid container direction='column' alignItems='center' justify='center'>\n        <Grid item>\n          <Frame\n            size={100}\n            radius={100}\n            position={'relative'}\n            drag={true}\n            dragPropagation={true}\n            dragConstraints={{ top: 0, bottom: 0, left: -200, right: 200 }}\n            dragElastic={0.6}\n            dragTransition={{ bounceStiffness: 300, bounceDamping: 10 }}\n            background={null}\n            image={ProfilePicture}></Frame>\n        </Grid>\n        <Grid item>\n          <JobData />\n        </Grid>\n        <Grid item>\n          <Socials />\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  );\n}\n\nexport default Portfolio;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Portfolio from './components/Portfolio';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Portfolio />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}