{"version":3,"sources":["images/ProfilePicture.jpeg","components/SocialIcon.js","components/Socials.js","components/JobData.js","components/Portfolio.js","serviceWorker.js","index.js"],"names":["module","exports","SocialIcon","name","link","Icon","Icons","IconButton","href","title","Socials","socials","map","social","key","techsUsed","job","jobData","jobDataKeys","Object","keys","useStyles","makeStyles","theme","chip","margin","spacing","JobTitle","classes","jobKey","Chip","label","className","tech","size","large","width","height","Portfolio","Fragment","Grid","container","direction","alignItems","justify","item","Avatar","alt","src","ProfilePicture","JobData","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qcAAAA,EAAOC,QAAU,IAA0B,6C,oLCc5BC,EAXI,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KACrBC,EAAOC,EAAMH,GACnB,OACC,oCACC,kBAACI,EAAA,EAAD,CAAYC,KAAMJ,EAAMK,MAAON,GAC9B,kBAACE,EAAD,S,QCSWK,EAdC,WACf,OACC,oCACEC,EAAQC,KAAI,SAAAC,GAAM,OAClB,kBAAC,EAAD,CACCV,KAAMU,EAAOV,KACbC,KAAMS,EAAOT,KACbU,IAAKD,EAAOV,Y,wBCLTY,EAA0BC,EAA1BD,UAAcE,E,YAAYD,E,eAC5BE,EAAcC,OAAOC,KAAKH,GAE1BI,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACtCC,KAAM,CACLC,OAAQF,EAAMG,QAAQ,SA4BTC,EAzBE,WAChB,IAAMC,EAAUP,IAEhB,OACC,oCACEH,EAAYN,KAAI,SAAAiB,GAAM,OACtB,kBAACC,EAAA,EAAD,CACChB,IAAKe,EACLE,MAAK,UAAKF,EAAL,aAAgBb,EAAIa,IACzBG,UAAWJ,EAAQJ,UAGrB,6BACCT,EAAUH,KAAI,SAAAqB,GAAI,OAClB,kBAACH,EAAA,EAAD,CACCI,KAAK,QACLpB,IAAKmB,EACLF,MAAK,UAAKE,GACVD,UAAWJ,EAAQJ,Y,iBCxBlBH,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACtCY,MAAO,CACNC,MAAOb,EAAMG,QAAQ,IACrBW,OAAQd,EAAMG,QAAQ,SA0BTY,MAvBf,WACC,IAAMV,EAAUP,IAChB,OACC,kBAAC,IAAMkB,SAAP,KACC,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,SAASC,WAAW,SAASC,QAAQ,UAC9D,kBAACJ,EAAA,EAAD,CAAMK,MAAI,GACT,kBAACC,EAAA,EAAD,CACCC,IAAI,eACJC,IAAKC,IACLjB,UAAWJ,EAAQO,SAGrB,kBAACK,EAAA,EAAD,CAAMK,MAAI,GACT,kBAACK,EAAD,OAED,kBAACV,EAAA,EAAD,CAAMK,MAAI,GACT,kBAAC,EAAD,UCjBeM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAeC,SAASC,eAAe,SD6HjD,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7dba1ac8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ProfilePicture.d487911e.jpeg\";","import React from \"react\";\nimport * as Icons from \"@material-ui/icons\";\nimport IconButton from \"@material-ui/core/IconButton\";\nconst SocialIcon = ({ name, link }) => {\n\tconst Icon = Icons[name];\n\treturn (\n\t\t<>\n\t\t\t<IconButton href={link} title={name}>\n\t\t\t\t<Icon />\n\t\t\t</IconButton>\n\t\t</>\n\t);\n};\n\nexport default SocialIcon;\n","import React from \"react\";\nimport SocialIcon from \"./SocialIcon\";\nimport socials from \"../constants/socials.json\";\nconst Socials = () => {\n\treturn (\n\t\t<>\n\t\t\t{socials.map(social => (\n\t\t\t\t<SocialIcon\n\t\t\t\t\tname={social.name}\n\t\t\t\t\tlink={social.link}\n\t\t\t\t\tkey={social.name}\n\t\t\t\t/>\n\t\t\t))}\n\t\t</>\n\t);\n};\n\nexport default Socials;\n","import React from \"react\";\nimport Chip from \"@material-ui/core/Chip\";\nimport job from \"../constants/job.json\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nconst { techsUsed, ...jobData } = job;\nconst jobDataKeys = Object.keys(jobData);\n\nconst useStyles = makeStyles(theme => ({\n\tchip: {\n\t\tmargin: theme.spacing(0.5)\n\t}\n}));\nconst JobTitle = () => {\n\tconst classes = useStyles();\n\n\treturn (\n\t\t<>\n\t\t\t{jobDataKeys.map(jobKey => (\n\t\t\t\t<Chip\n\t\t\t\t\tkey={jobKey}\n\t\t\t\t\tlabel={`${jobKey}: ${job[jobKey]}`}\n\t\t\t\t\tclassName={classes.chip}\n\t\t\t\t/>\n\t\t\t))}\n\t\t\t<br />\n\t\t\t{techsUsed.map(tech => (\n\t\t\t\t<Chip\n\t\t\t\t\tsize='small'\n\t\t\t\t\tkey={tech}\n\t\t\t\t\tlabel={`${tech}`}\n\t\t\t\t\tclassName={classes.chip}\n\t\t\t\t/>\n\t\t\t))}\n\t\t</>\n\t);\n};\n\nexport default JobTitle;\n","import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Socials from \"./Socials\";\nimport JobData from \"./JobData\";\nimport ProfilePicture from \"../images/ProfilePicture.jpeg\";\nconst useStyles = makeStyles(theme => ({\n\tlarge: {\n\t\twidth: theme.spacing(12),\n\t\theight: theme.spacing(12)\n\t}\n}));\nfunction Portfolio() {\n\tconst classes = useStyles();\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<Grid container direction='column' alignItems='center' justify='center'>\n\t\t\t\t<Grid item>\n\t\t\t\t\t<Avatar\n\t\t\t\t\t\talt='Daniel Sabic'\n\t\t\t\t\t\tsrc={ProfilePicture}\n\t\t\t\t\t\tclassName={classes.large}\n\t\t\t\t\t/>\n\t\t\t\t</Grid>\n\t\t\t\t<Grid item>\n\t\t\t\t\t<JobData />\n\t\t\t\t</Grid>\n\t\t\t\t<Grid item>\n\t\t\t\t\t<Socials />\n\t\t\t\t</Grid>\n\t\t\t</Grid>\n\t\t</React.Fragment>\n\t);\n}\n\nexport default Portfolio;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Portfolio from \"./components/Portfolio\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Portfolio />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}